{
  "name": "save_info_to_db",
  "description": "Save info to outside database when the user inputs a personal fact Athena doesn't know about and thinks should be stored.",
  "parameters": {
    "type": "object",
    "properties": {
      "output": {
        "type": "string",
        "description": "A string with any variation of message that tells you the save in the database completed. For example: {data} was saved successfully in {path} in your database."
      },
      "path": {
        "type": "string",
        "description": "The path in my database where Athena thinks the relevant data should be stored. Returned paths should match the schema in the database-schema.json file in Memory to see all paths. Use only the paths in that file under each schema."
      },
      "data": {
        "type": "object",
        "description":"A key value pair that Athena thinks should be stored in my database.",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key used to store the relevant data that Athena thinks should be stored in my database. Use database-schema.json file in Memory to see all keys and paths, but Athena can also choose another one."
          },
          "value": {
            "type": "string",
            "description": "The relevant data that Athena thinks should be stored in my database."
          }
        }
      },
      "query": {
        "type": "string",
        "description": "The query Athena thinks should be run to query the data in the database. Should always have format that can be used to query a MongoDB database. Use database-schema.json file in Memory to see all keys and paths."
      }
    },
    "required": [
      "path",
      "data",
      "query"
    ]
  }
}

{
  "name": "get_info_from_db",
  "description": "Get info from my database when Athena doesn't know the answer to a personal question and thinks it should be in the database.",
  "parameters": {
    "type": "object",
    "properties": {
      "output": {
        "type": "array",
        "description": "An array containing objects with one key and one value each. Each element in the array is one field in the table the function is querying. Returned keys should match the schema in the database-schema.json file in Memory to see all paths.",
        "items":{
          "type":"object",
          "properties":{
            "generic_key":{
              "type":"string",
              "description":"A table field containing one key and one value representing one field of the data being queried. The name, generic key, is supposed to be replaced with whatever the database returned. Also, you can see what key to use in the database-schema.json fle in your Memory."
            }
          }
        }
      },
      "path": {
        "type": "string",
        "description": "The path in my database where Athena thinks the relevant data should be gotten from. Use database-schema.json file in Memory to see all paths. Use only the paths in that file under each schema."
      },
      "query": {
        "type": "string",
        "description": "The query Athena thinks should be made to my database to retrieve the data. Should always have format that can be used to query a MongoDB database. Use database-schema.json file in Memory to see all keys and paths."
      }
    },
    "required": [
      "path",
      "query"
    ]
  }
}

{
  "name": "fetch_info_from_api",
  "description": "Get info from my API when Athena doesn't know the answer to a question and thinks it should be in the API and not my personal database.",
  "parameters": {
  "type": "object",
  "properties": {
    "output": {
      "type": "array",
      "description": "An array containing objects with one key and one value each. Each element in the array is one field in the table the function is querying. Returned keys should match the schema in the api-schema.json file in Memory to see all paths.",
      "items": {
        "type": "object",
        "properties": {
          "generic_key": {
            "type": "string",
            "description": "A table field containing one key and one value representing one field of the data being queried. The name, generic key, is supposed to be replaced with whatever the database returned. Also, you can see what key to use in the api-schema.json fle in your Memory."
          }
        }
      }
    },
    "endpoint": {
      "type": "string",
      "description": "The endpoint in my API where Athena thinks the relevant data should be fetched from. Use api-schema.json file in Memory to see all endpoints in API. Use only the endpoints in that file under each schema."
    },
      "key": {
        "type": "string",
        "description": "The key Athena thinks should be queried from my API to retrieve the data. Use api-schema.json file in Memory to see all keys and endpoints."
      }
    },
    "required": [
      "endpoint",
      "query"
    ]
  }
}

{
  "name": "fetch_info_from_google_drive",
  "description": "Get info from my API when Athena doesn't know the answer to a question and thinks it should be in the API and not my personal database.",
  "parameters": {
  "type": "object",
  "properties": {
    "output": {
      "type": "array",
      "description": "An array containing objects with one key and one value each. Each element in the array is one field in the table the function is querying. Returned keys should match the schema in the api-schema.json file in Memory to see all paths.",
      "items": {
        "type": "object",
        "properties": {
          "generic_key": {
            "type": "string",
            "description": "A table field containing one key and one value representing one field of the data being queried. The name, generic key, is supposed to be replaced with whatever the database returned. Also, you can see what key to use in the api-schema.json fle in your Memory."
          }
        }
      }
    },
    "endpoint": {
      "type": "string",
      "description": "The endpoint in my API where Athena thinks the relevant data should be fetched from. Use api-schema.json file in Memory to see all endpoints in API. Use only the endpoints in that file under each schema."
    },
      "key": {
        "type": "string",
        "description": "The key Athena thinks should be queried from my API to retrieve the data. Use api-schema.json file in Memory to see all keys and endpoints."
      }
    },
    "required": [
      "endpoint",
      "query"
    ]
  }
}