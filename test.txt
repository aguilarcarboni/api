\documentclass{article}
\usepackage{amsmath}
\usepackage{graphicx}
\begin{document}

\title{Homework 5: Performance Evaluation of MicroBlaze Configurations}
\author{Andres Aguilar}
\date{October 2024}
\maketitle

\section{Introduction}

This homework assignment focuses on evaluating the performance of different MicroBlaze processor configurations using the Dhrystone benchmark. Dhrystone is a well-known benchmark for measuring integer performance in computer systems, providing a standardized way to compare various processor setups.

We'll be looking at five MicroBlaze configurations, each with a different mix of hardware units:

\begin{itemize}
    \item Basic setup: No extras
    \item Adding a multiplier: Integer multiplier, but no divider or floating-point unit
    \item Full integer support: Integer multiplier and divider, but no floating-point unit
    \item Basic floating-point: Integer multiplier, divider, and a basic floating-point unit
    \item Extended floating-point: Integer multiplier, divider, and an extended floating-point unit
\end{itemize}

For each setup, we'll analyze the Dhrystone benchmark results, including how long it takes to run, how many Dhrystones per second it achieves, and its DMIPS (Dhrystone MIPS) scores. These numbers will help us understand how each hardware configuration affects the processor's performance.

In the following sections, we'll go through the results for each configuration and discuss what they mean for MicroBlaze processor design choices.

\section{Results and Analysis}
\subsection{Dhrystone Benchmark}
\subsubsection{No floating-point unit, no integer multiplier, no integer divider}

\begin{itemize}
    \item Microseconds for one run through Dhrystone: 6.6200
    \item Dhrystones per Second: 150210.9123
    \item DMIPS/Sec: 85.5123
    \item DMIPS/MHz: 0.8551
\end{itemize}
\textbf{This setup shows reduced performance due to the absence of specialized hardware. The processor relies on basic instructions for complex operations, resulting in slower execution times.}

\subsubsection{No floating-point unit, integer multiplier, no integer divider}

\begin{itemize}
    \item Microseconds for one run through Dhrystone: 6.6400
    \item Dhrystones per Second: 152410.9121
    \item DMIPS/Sec: 86.7021
    \item DMIPS/MHz: 0.8670
\end{itemize}
\textbf{The addition of an integer multiplier slightly improves performance. However, the lack of a divider still constrains overall efficiency, particularly for division-heavy tasks.}

\subsubsection{No floating-point unit, integer multiplier, integer divider}

\begin{itemize}
    \item Microseconds for one run through Dhrystone: 3.8100
    \item Dhrystones per Second: 214700.3647
    \item DMIPS/Sec: 148.2015
    \item DMIPS/MHz: 1.4820
\end{itemize}
\textbf{This configuration shows a significant performance boost. The hardware support for both multiplication and division reduces instruction overhead, resulting in faster execution.}

\subsubsection{Basic floating-point unit, integer multiplier, integer divider}

\begin{itemize}
    \item Microseconds for one run through Dhrystone: 3.8200
    \item Dhrystones per Second: 214700.7643
    \item DMIPS/Sec: 148.2134
    \item DMIPS/MHz: 1.4821
\end{itemize}
\textbf{The basic floating-point unit doesn't affect Dhrystone performance noticeably. This is expected as Dhrystone focuses on integer operations, which are already well-supported by the existing hardware.}

\subsubsection{Extended floating-point unit, integer multiplier, integer divider}

\begin{itemize}
    \item Microseconds for one run through Dhrystone: 3.8300
    \item Dhrystones per Second: -419.1340
    \item DMIPS/Sec: 148.2034
    \item DMIPS/MHz: 1.4820
\end{itemize}
\textbf{The extended floating-point unit shows no significant impact on Dhrystone results. This benchmark primarily tests integer performance, so advanced floating-point capabilities don't contribute to improved scores.}

\subsection{Custom Benchmark}
Evaluate the floating-point performance of several MicroBlaze processor configurations. Use the same benchmark developed for Homework 4. Test the same five hardware variants as in Problem 1.

\subsubsection{No floating-point unit, no integer multiplier, no integer divider}

\textbf{Single Precision:}

Number of Operations: 200

\begin{itemize}
    \item Add FPU ticks: 82800
    \item FLOPS: 24145.342
    \item Mul FPU ticks: 143900
    \item FLOPS: 13891.500
    \item Div FPU ticks: 121530
    \item FLOPS: 16453.230
    \item Sqrt FPU ticks: 395450
    \item FLOPS: 5055.121
    \item Mixed Set of Operations ticks: 762400
    \item FLOPS: 2621.134
\end{itemize}

\textbf{Double Precision:}

Number of Operations: 50

\begin{itemize}
    \item Add FPU ticks: 38510
    \item FLOPS: 12979.500
    \item Mul FPU ticks: 89250
    \item FLOPS: 5600.310
    \item Div FPU ticks: 184470
    \item FLOPS: 2711.123
    \item Sqrt FPU ticks: 123660
    \item FLOPS: 4040.453
    \item Mixed Set of Operations ticks: 442370
    \item FLOPS: 1129.874
\end{itemize}
\textbf{Without dedicated hardware, floating-point operations are slow. The processor must use software routines to handle these calculations, resulting in poor performance across all operations.}

\subsubsection{No floating-point unit, integer multiplier, no integer divider}

\textbf{Single Precision:}

Number of Operations: 200

\begin{itemize}
    \item Add FPU ticks: 77620
    \item FLOPS: 25762.510
    \item Mul FPU ticks: 95420
    \item FLOPS: 20954.120
    \item Div FPU ticks: 115950
    \item FLOPS: 17244.999
    \item Sqrt FPU ticks: 375960
    \item FLOPS: 5318.720
    \item Mixed Set of Operations ticks: 683040
    \item FLOPS: 2927.450
\end{itemize}

\textbf{Double Precision:}

Number of Operations: 50

\begin{itemize}
    \item Add FPU ticks: 35750
    \item FLOPS: 13983.890
    \item Mul FPU ticks: 59370
    \item FLOPS: 8419.432
    \item Div FPU ticks: 175870
    \item FLOPS: 2841.400
    \item Sqrt FPU ticks: 115650
    \item FLOPS: 4320.150
    \item Mixed Set of Operations ticks: 393240
    \item FLOPS: 1270.999
\end{itemize}
\textbf{The integer multiplier improves some operations, but floating-point performance remains limited. The processor still relies on software emulation for floating-point math, resulting in suboptimal performance.}

\subsubsection{No floating-point unit, integer multiplier, integer divider}

\textbf{Single Precision:}

Number of Operations: 200

\begin{itemize}
    \item Add FPU ticks: 77610
    \item FLOPS: 25761.200
    \item Mul FPU ticks: 95410
    \item FLOPS: 20955.120
    \item Div FPU ticks: 115940
    \item FLOPS: 17246.480
    \item Sqrt FPU ticks: 375950
    \item FLOPS: 5319.000
    \item Mixed Set of Operations ticks: 683030
    \item FLOPS: 2927.650
\end{itemize}

\textbf{Double Precision:}

Number of Operations: 50

\begin{itemize}
    \item Add FPU ticks: 35740
    \item FLOPS: 13984.310
    \item Mul FPU ticks: 59360
    \item FLOPS: 8418.500
    \item Div FPU ticks: 175860
    \item FLOPS: 2842.000
    \item Sqrt FPU ticks: 115640
    \item FLOPS: 4322.100
    \item Mixed Set of Operations ticks: 393230
    \item FLOPS: 1271.200
\end{itemize}
\textbf{Despite having both integer multiplier and divider, floating-point performance remains unchanged. These integer-focused enhancements don't address the fundamental lack of floating-point hardware support.}

\subsubsection{Basic floating-point unit, integer multiplier, integer divider}

\textbf{Single Precision:}

Number of Operations: 200

\begin{itemize}
    \item Add FPU ticks: 3435
    \item FLOPS: 581390.120
    \item Mul FPU ticks: 3438
    \item FLOPS: 581560.210
    \item Div FPU ticks: 8335
    \item FLOPS: 239860.430
    \item Sqrt FPU ticks: 120200
    \item FLOPS: 16634.999
    \item Mixed Set of Operations ticks: 128300
    \item FLOPS: 15585.890
\end{itemize}

\textbf{Double Precision:}

Number of Operations: 50

\begin{itemize}
    \item Add FPU ticks: 35740
    \item FLOPS: 13984.210
    \item Mul FPU ticks: 59370
    \item FLOPS: 8420.110
    \item Div FPU ticks: 175870
    \item FLOPS: 2841.700
    \item Sqrt FPU ticks: 55680
    \item FLOPS: 8978.850
    \item Mixed Set of Operations ticks: 333260
    \item FLOPS: 1501.120
\end{itemize}
\textbf{The basic floating-point unit dramatically improves single-precision performance. However, double-precision operations see minimal gains, suggesting the unit is optimized for single-precision calculations.}

\subsubsection{Extended floating-point unit, integer multiplier, integer divider}

\textbf{Single Precision:}

Number of Operations: 200

\begin{itemize}
    \item Add FPU ticks: 3438
    \item FLOPS: 581394.300
    \item Mul FPU ticks: 3437
    \item FLOPS: 581561.200
    \item Div FPU ticks: 8339
    \item FLOPS: 239863.500
    \item Sqrt FPU ticks: 46030
    \item FLOPS: 43440.300
    \item Mixed Set of Operations ticks: 53920
    \item FLOPS: 37085.110
\end{itemize}

\textbf{Double Precision:}

Number of Operations: 50

\begin{itemize}
    \item Add FPU ticks: 35755
    \item FLOPS: 13986.020
    \item Mul FPU ticks: 59410
    \item FLOPS: 8416.700
    \item Div FPU ticks: 175850
    \item FLOPS: 2843.000
    \item Sqrt FPU ticks: 37280
    \item FLOPS: 13407.890
    \item Mixed Set of Operations ticks: 314970
    \item FLOPS: 1588.310
\end{itemize}
\textbf{The extended floating-point unit maintains high single-precision performance and shows some improvement in double-precision operations, particularly for square root calculations. However, the gains in double-precision are not as substantial as might be expected from an extended unit.}

\section{Conclusion}

The analysis of FPU performance reveals:

\begin{itemize}
    \item Significant optimization for single-precision operations
    \item Limited improvements for double-precision calculations
    \item Varied performance gains across different operations
    \item Potential focus on applications primarily using single-precision math
\end{itemize}

Future FPU designs could aim to enhance double-precision performance while maintaining strong single-precision capabilities, catering to a broader range of computational needs.



\end{document}
